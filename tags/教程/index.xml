<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 on lyy个人博客</title>
    <link>https://chianyoung.github.io/tags/%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in 教程 on lyy个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 22 Sep 2023 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chianyoung.github.io/tags/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>文献管理入门</title>
      <link>https://chianyoung.github.io/post/zotero/</link>
      <pubDate>Fri, 22 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chianyoung.github.io/post/zotero/</guid>
      <description>有些是不会做，但不得不做的时候，我会赋予它一个意义。任何时候都可以看作是提升自己的机会。
如果其中有一点步骤对某人有一点用，价值就达到了。
Steve jobs：对产品的看法，必须从用户的体验入手，再回到技术上。不能从技术上入手，再回到用户体验上。
对于任何软件的学习，不能是直接全部学习所有功能，结果很多根本不会用到。而是有了需求，再去找这个软件，学习使用。
产品设计的思想是这样的，有了懒得买饭做饭的需求，才有了外卖平台……
使用产品也是一样的，比如购物，一定是有了这个需求，才去买，没有人家里弄个仓库，以防万一未来会用到。手机下载软件。不可能全部下载。因为有内存成本。学习也是一样，时间成本，生命就那么长，要及时行乐。传统的教育观念，学习就是好的，并不见得，如何平衡学习和休息才重要。
所以用到再去学就好。
延伸到任何学习，不能盲目无目的。之前的大忌
（以上为自我反省，与内容无关可忽略）
 因为内容网上都有，大家只需要简单听听就行，
为方便大家浏览回顾，本教程
文字版本会上传到个人博客：liuyuyang.art
培训视频会录制并上传bilibili：不懂艺术抑术家
教程不求详尽，只求实用。
   为什么需要看文献
 什么被别人做过了，避免做无用功 别人在做什么，怎么做 自己可以做什么：研究方向，方法，idea， ……    为何做文献管理
方便查找。就像整理房间，拿，而不是找。
  文献库
  PubMed (nih.gov)
最常用
基本检索，筛选
  Web of Science
大型综合性、多学科、核心期刊引文索引数据库
  Semantic Scholar | AI-Powered Research Tool
  简介：
2015 年 11 月 2 日，微软联合创始人 Paul Allen 旗下的艾伦人工智能研究所 （Allen Institute for Artificial Intelligence，AI2）发布了一款名为 Semantic Scholar 的免费学术搜索引擎，目标是「破除混沌（cut through the clutter）」，帮助科研用户从浩如烟海的文献中快速筛选有用信息，减少检索时间，提升工作效率。</description>
    </item>
    
    <item>
      <title>Hugo个人博客搭建教程</title>
      <link>https://chianyoung.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chianyoung.github.io/post/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</guid>
      <description>工作流：hugo生成静态页面&amp;gt;git推送到网上
最简流程  安装Hugo   https://github.com/gohugoio/hugo/releases找到相应版本压缩包，下载解压，保存到合理路径 如何看是否安装成功：打开cmd&amp;gt;hugo version   安装git
  利用Hugo创建自己的博客
  进入到适合路径运行git bash或运行cd到相应路径
hugo new site myblog #myblog为自己设定的文件夹名字,
如无特殊说明，以下命令都是在myblog文件夹下输入的
可以进入文件夹看到已经创建好了
下载主题  https://themes.gohugo.io/选择自己喜欢的主题（这里以m10c为例）
方法一：下载压缩包，解压到themes
方法二：cd myblog
git clone &amp;lt;https://github.com/vaga/hugo-theme-m10c.git&amp;gt; themes/m10c 可以看到themes文件夹下有m10c
应用主题，用hugo serve本地预览  启动博客命令，输入 hugo server -t m10c --buildDrafts 可打开http://localhost:1313查看网站已经搭建好。网站会一直存在，CTRL+C结束。
创建文章  第一次：hugo new post/blog.md
创建在了content下的post下的文件，md为markdown文件
以后：直接在文件夹下增添或修改md文件即可
可再输入：hugo server -t m10c --buildDrafts 网站会更新，因为你增添了新的内容。但是是搭载在本地。
把博客部署到远端GitHub上  （1）创建仓库，命名为：chianyoung.github.io（前面替换为你自己的）
（2）hugo --theme=m10c --baseUrl=&amp;quot;地址&amp;quot; --buildDrafts 成功后根目录生成一个public文件夹
（3）将public上传到github仓库上
 git init git add .</description>
    </item>
    
    <item>
      <title>Markdown语法学习测试</title>
      <link>https://chianyoung.github.io/post/markdown/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chianyoung.github.io/post/markdown/</guid>
      <description>字体 *用**括住表示斜体，或者_ _括住*
**加粗，开头，结尾，以 **开头和结尾 **
段落 ## 二级标题 CTRL+2 ……
六级标题 ctrl+6  引用效果
  段落的，标识符和文字间有空格，符号为英文
    演示列表 还可以有层级   666 77   爱丽丝  插入文章或其他元素 最常见的就是通过 []() 来插入链接和 ![]() 来插入图片（可以是本地图片也可以是网络图片）
少数派
dsjaflkjdkfjdkjfljdslfjdlkfj</description>
    </item>
    
    <item>
      <title>Hugo博客更新命令</title>
      <link>https://chianyoung.github.io/post/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://chianyoung.github.io/post/%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E5%91%BD%E4%BB%A4/</guid>
      <description>#提交更新（在pubilc上一级目录打开git bash） hugo --theme=m10c --baseUrl=&amp;#34;https://chianyoung.github.io&amp;#34; --buildDrafts cd public git add . git commit -m &amp;#34;first commit&amp;#34; git push -u origin main git push --force#强推，若最后一步失败尝试这个 </description>
    </item>
    
  </channel>
</rss>